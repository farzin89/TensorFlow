# -*- coding: utf-8 -*-
"""some function for computer vision .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AszyC4UiWXU3wq2MB2qrruCjVtBpS4Np
"""

def pred_and_plot(model,filename,class_names=class_names):
   """
   Import an image located at filename ,make a prediction with model and 
   plot the image with the predicted class as the title.
   """
   # Import the target image and preprocess it
   img= load_and_prep_image(filename)

   # make a prediction 
   pred = model.predict(tf.expand_dims(img,axis=0))

   # add in logic for multi-class & get pred_class name 

   if len (pred[0]) > 1 :
     pred_class = class_names[tf.argmax(pred[0])]
   else:
     pred_class = class_names[int(tf.round(pred[0]))]

   # plot the image and predicted class
   plt.imshow(img)
   plt.title(f"prediction: {pred_class}")
   plt.axis(False)

# create a function to import an image and resize it to be able to used with our model 

def load_and_prep_image(filename,img_shape=224):
  """
  Reads an image from filename, turns it into a tensor and reshapes it
   to (img_shape,img_shape,colour_channels).
  """
  # Read in the image 
  img = tf.io.read_file(filename)
  # Decode the read file into a tensor
  img = tf.image.decode_image(img)
  # Resize the image
  img = tf.image.resize(img,size=[img_shape,img_shape]) 
  # Rescale the image (get all values between 0 and 1)
  img = img/255.
  return img

# Plot the validation and training curves separately 
def plot_loss_curves(history):
   """
   Returns separate loss curves for training and validation metrics."""
   loss = history.history["loss"]
   val_loss= history.history["val_loss"]

   accuracy= history.history["accuracy"]
   val_accuracy = history.history["val_accuracy"]

   epochs= range(len(history.history["loss"])) # how many epochs did we run for?

   # Plot loss
   plt.plot(epochs,loss,label="training_loss")
   plt.plot(epochs,val_loss, label="val_loss")
   plt.title("loss")
   plt.xlabel("epochs")
   plt.legend()

  # plot the accuracy
   plt.figure()
   plt.plot(epochs,accuracy,label="training_accuracy")
   plt.plot(epochs,val_accuracy, label="val_accuracy")
   plt.title("accuracy")
   plt.xlabel("epochs")
   plt.legend()

