# -*- coding: utf-8 -*-
"""01_neural_network_regression_with_tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M5lOtClS1ffpWIMqxzkzBNC6gnWlqipe

# Intoduction to Regression with Neural Networks in Tensorflow

There are many definitions for a regression problem but in our case , we are going to simplify it : prediction a numerical variable based on some other combination of variables, even shorter.... predicting a number.
"""

# import TensorFlow

import tensorflow as tf

"""# Creating data to view and fit

"""

import numpy as np
import matplotlib.pyplot as plt 

# Creat feature 
x = np.array([-7.0 , -4.0 , -1.0 , 2.0 , 5.0, 8.0 , 11.0, 14.0])

# Create label 
y = np.array([3.0 , 6.0 ,9.0 , 12.0 , 15.0 , 18.0 , 21.0, 24.0])

# Visualize it 
plt.scatter(x,y);

y == x + 10

"""# input and output shapes"""

# Create a demo tensor for our housing price prediction problem 
house_info = tf.constant(["bedroom","bathroom","garage"])
house_price = tf.constant([939700])
house_info , house_price

x[0],y[0]

x[1],y[1]

input_shape = x.shape 
output_shape =y.shape 
input_shape, output_shape

input_shape = x[0].shape 
output_shape =y[0].shape 
input_shape, output_shape

x[0].ndim

x[0],y[0]

# Turn our Numpy arrays into tensors with dtype float32
x = tf.cast(tf.constant(x), dtype=tf.float32)
y = tf.cast(tf.constant(y), dtype=tf.float32)
x,y

input_shape = x[0].shape
output_shape = y[0].shape
input_shape,output_shape

plt.scatter(x,y)



"""## steps in modelling with TensorFlow
1. **Creating a model** - define the input and output layers , as well as the hidden layers of a deep learning model.

2. **Compiling a model** - define the loss function (in others words,the function which tells our model how wrong it is) and the optimizer (tells our model how to improve the patterns its learning ) and evaluation metrics(what we can use to interpret the performance of our model).

3. **Fitting the a model** - learning the model try to find patterns between x & y (features and labels). 
"""

# set random seeed

tf.random.set_seed(42)

# 1. Create a model using the Sequentioal API

model = tf.keras.Sequential([ 
  tf.keras.layers.Dense(1)
])

# 2. Compile the model 

model.compile(loss = tf.keras.losses.mae, # mae is short for mean absolute error
              optimizer = tf.keras.optimizers.SGD(),#sdg is short for stochastic gradient descent 
              metrics = ["mae"])

# 3. Fit the model

 model.fit(x,y, epochs=5)

